import React, { useState, useEffect } from 'react';
import './App.css';

const API_BASE_URL = process.env.REACT_APP_BACKEND_URL;

// Header Component
const Header = ({ activeSection, setActiveSection }) => {
  return (
    <header className="bg-navy-900 text-white shadow-lg sticky top-0 z-50">
      <div className="container mx-auto px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="text-2xl font-bold text-emerald-400">
              IRS Escape Plan
            </div>
            <div className="hidden md:block text-sm text-gray-300">
              Your Path to Tax Freedom
            </div>
          </div>
          
          <nav className="hidden md:flex space-x-6">
            {['courses', 'taxbot', 'premium-tools', 'tools', 'glossary', 'marketplace'].map((section) => (
              <button
                key={section}
                onClick={() => setActiveSection(section)}
                className={`capitalize transition-colors duration-200 ${
                  activeSection === section
                    ? 'text-emerald-400 border-b-2 border-emerald-400'
                    : 'text-gray-300 hover:text-emerald-400'
                }`}
              >
                {section}
              </button>
            ))}
          </nav>
          
          <div className="flex items-center space-x-4">
            <button className="bg-emerald-500 hover:bg-emerald-600 text-white px-4 py-2 rounded-lg transition-colors duration-200">
              Get Started Free
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

// TaxBot AI Assistant Component
const TaxBotSection = () => {
  const [chatThreads, setChatThreads] = useState([]);
  const [currentThread, setCurrentThread] = useState(null);
  const [newMessage, setNewMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredThreads, setFilteredThreads] = useState([]);
  const [glossaryTerms, setGlossaryTerms] = useState([]);
  const [viewedGlossaryTerms, setViewedGlossaryTerms] = useState(new Set());
  const [glossaryXP, setGlossaryXP] = useState(0);

  useEffect(() => {
    loadChatThreads();
    fetchGlossaryTerms();
  }, []);

  const fetchGlossaryTerms = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/glossary`);
      if (response.ok) {
        const terms = await response.json();
        setGlossaryTerms(terms);
      }
    } catch (error) {
      console.error('Failed to load glossary terms:', error);
    }
  };

  useEffect(() => {
    if (searchQuery) {
      const filtered = chatThreads.filter(thread => 
        thread.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        thread.messages.some(msg => 
          msg.message.toLowerCase().includes(searchQuery.toLowerCase()) ||
          msg.response.toLowerCase().includes(searchQuery.toLowerCase())
        )
      );
      setFilteredThreads(filtered);
    } else {
      setFilteredThreads(chatThreads);
    }
  }, [searchQuery, chatThreads]);

  const loadChatThreads = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/users/default_user/chat-threads`);
      if (response.ok) {
        const threads = await response.json();
        setChatThreads(threads);
        setFilteredThreads(threads);
      }
    } catch (error) {
      console.error('Failed to load chat threads:', error);
    }
  };

  const createNewThread = async () => {
    const newThread = {
      id: Date.now().toString(),
      user_id: 'default_user',
      title: 'New Strategy Discussion',
      messages: [],
      created_at: new Date().toISOString(),
      last_updated: new Date().toISOString(),
      is_starred: false
    };

    try {
      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/users/default_user/chat-threads`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newThread)
      });

      if (response.ok) {
        const thread = await response.json();
        setChatThreads([thread, ...chatThreads]);
        setCurrentThread(thread);
      }
    } catch (error) {
      console.error('Failed to create thread:', error);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim() || !currentThread) return;

    setIsLoading(true);
    const message = {
      id: Date.now().toString(),
      user_id: 'default_user',
      message: newMessage,
      response: '',
      timestamp: new Date().toISOString(),
      is_starred: false,
      context_modules: [],
      context_glossary: []
    };

    try {
      const response = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/api/users/default_user/chat-threads/${currentThread.id}/messages`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(message)
        }
      );

      if (response.ok) {
        const updatedMessage = await response.json();
        const updatedThread = {
          ...currentThread,
          messages: [...currentThread.messages, updatedMessage],
          last_updated: new Date().toISOString()
        };
        setCurrentThread(updatedThread);
        
        // Update threads list
        setChatThreads(threads => 
          threads.map(t => t.id === currentThread.id ? updatedThread : t)
        );
        
        setNewMessage('');
      }
    } catch (error) {
      console.error('Failed to send message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleMessageStar = async (messageId) => {
    if (!currentThread) return;

    try {
      await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/api/users/default_user/chat-threads/${currentThread.id}/messages/${messageId}/star`,
        { method: 'PUT' }
      );

      const updatedThread = {
        ...currentThread,
        messages: currentThread.messages.map(msg =>
          msg.id === messageId ? { ...msg, is_starred: !msg.is_starred } : msg
        )
      };
      setCurrentThread(updatedThread);
    } catch (error) {
      console.error('Failed to star message:', error);
    }
  };

  const exportToPDF = () => {
    if (!currentThread) return;
    
    const content = currentThread.messages.map(msg => 
      `Q: ${msg.message}
A: ${msg.response}

`
    ).join('');
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${currentThread.title}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const copyToClipboard = () => {
    if (!currentThread) return;
    
    const content = currentThread.messages.map(msg => 
      `Q: ${msg.message}
A: ${msg.response}

`
    ).join('');
    
    navigator.clipboard.writeText(content);
    alert('Chat transcript copied to clipboard!');
  };

  // Enhanced glossary tag system for modules
  const renderGlossaryTags = (lesson) => {
    // Define key concepts for each module by order_index and course type
    const moduleGlossaryTerms = {
      // W-2 Escape Plan modules
      'w2-1': ['Tax Planning', 'W-2 Income', 'CPA vs Strategist'],
      'w2-2': ['QOF (Qualified Opportunity Fund)', 'Bonus Depreciation', 'REPS (Real Estate Professional Status)', 'Short-Term Rental (STR)'],
      'w2-3': ['AGI', 'Offer in Compromise', 'Currently Not Collectible'],
      'w2-4': ['Entity Planning', 'Income Shifting', 'Timing Arbitrage'],
      'w2-5': ['Asset Location', 'QOF (Qualified Opportunity Fund)'],
      'w2-6': ['Tax Timing Arbitrage', 'RSU Planning Window', 'High-Income Threshold'],
      'w2-7': ['Income Repositioning', 'Tax Efficiency', 'Dollar-Cost Averaging (DCA)'],
      'w2-8': ['Passive Loss Limitation', '750-Hour Test', 'Audit-Proofing'],
      'w2-9': ['REPS (Real Estate Professional Status)', 'Short-Term Rental (STR)', 'Cost Segregation (Cost Seg)'],
      
      // Business Owner Escape Plan modules  
      'business-1': ['MSO (Management Services Organization)', 'Entity Planning', 'Tax Planning'],
      'business-2': ['QSBS (Qualified Small Business Stock)', 'F-Reorg (F Reorganization)', 'Trust Multiplication Strategy'],
      'business-3': ['Deduction Stack', 'Cost Segregation (Cost Seg)', 'IDC (Intangible Drilling Costs)'],
      'business-4': ['Wealth Multiplier Loop', 'Strategic Compounding', 'Asset Protection'],
      'business-5': ['Zero-Tax Income Stack', 'Income Repositioning', 'Tax Efficiency'],
      'business-6': ['Split-Dollar Life Insurance', 'Loan-Based Premium Funding', 'Estate Tax Exposure'],
      'business-7': ['Co-Investment (MSO or Trust)', 'Depreciation Recapture', 'Installment Sale'],
      'business-8': ['Trust Multiplication Strategy', 'Estate Tax Exposure', 'Asset Protection'],
      'business-9': ['Strategic Compounding', 'Wealth Multiplier Loop', 'Zero-Tax Income Stack']
    };
    
    // Get terms for this lesson's index
    const termNames = moduleGlossaryTerms[`w2-${lesson.order_index}`] || 
                     moduleGlossaryTerms[`business-${lesson.order_index}`] || [];
    
    // Find the actual glossary terms
    const moduleConcepts = termNames
      .map(termName => glossaryTerms.find(term => term.term === termName))
      .filter(Boolean);
    
    if (moduleConcepts.length === 0) return null;
    
    return (
      <div className="mb-6">
        <h4 className="text-lg font-semibold text-navy-900 mb-3">Key Concepts</h4>
        <div className="flex flex-wrap gap-2">
          {moduleConcepts.map((concept, index) => (
            <div key={index} className="relative group">
              <button
                onClick={() => handleGlossaryClick(concept)}
                onMouseEnter={(e) => showGlossaryTooltip(e, concept)}
                onMouseLeave={hideGlossaryTooltip}
                className="glossary-concept-tag bg-emerald-100 hover:bg-emerald-200 text-emerald-800 px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 hover:scale-105 hover:shadow-md"
              >
                📚 {concept.term}
              </button>
            </div>
          ))}
        </div>
      </div>
    );
  };
  
  // Enhanced glossary tooltip system
  const showGlossaryTooltip = (event, concept) => {
    // Remove any existing tooltips
    hideGlossaryTooltip();
    
    if (!concept.plain_english) return;
    
    const tooltip = document.createElement('div');
    tooltip.className = 'glossary-concept-tooltip';
    tooltip.innerHTML = `
      <div class="bg-navy-900 text-white p-3 rounded-lg shadow-xl max-w-xs z-50">
        <h5 class="font-bold mb-1">${concept.term}</h5>
        <p class="text-sm text-gray-200">${concept.plain_english}</p>
        <div class="text-xs text-gray-300 mt-1">Click to view full details</div>
      </div>
    `;
    
    const rect = event.target.getBoundingClientRect();
    tooltip.style.position = 'fixed';
    tooltip.style.left = `${rect.left + rect.width / 2}px`;
    tooltip.style.top = `${rect.top - 10}px`;
    tooltip.style.transform = 'translateX(-50%) translateY(-100%)';
    tooltip.style.zIndex = '2000';
    tooltip.style.pointerEvents = 'none';
    
    document.body.appendChild(tooltip);
  };
  
  const hideGlossaryTooltip = () => {
    document.querySelectorAll('.glossary-concept-tooltip').forEach(tooltip => tooltip.remove());
  };
  
  // Enhanced glossary click handler with XP
  const handleGlossaryClick = (concept) => {
    hideGlossaryTooltip();
    
    // Award XP if not already viewed
    if (!viewedGlossaryTerms.has(concept.id)) {
      setViewedGlossaryTerms(prev => new Set([...prev, concept.id]));
      setGlossaryXP(prev => prev + 5);
    }
    
    // Stub for openGlossary function
    const openGlossary = (termName) => {
      console.log(`Opening glossary for term: ${termName}`);
    };
    
    openGlossary(concept.term);
  };
  return (
    <>
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[80vh]">
        {/* Main grid content */}
      </div>

      <style>{\}</style>
    </>
  );
              {/* Definition Section */}
              <div className="mb-6">
                <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Definition</h4>
                <p className="text-gray-700 leading-relaxed">{showGlossary.definition}</p>
              </div>

              {/* Plain English Section */}
              {showGlossary.plain_english && (
                <div className="mb-6">
                  <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Plain English</h4>
                  <p className="text-gray-700 leading-relaxed">{showGlossary.plain_english}</p>
                </div>
              )}

              {/* Real-World Case Study Section */}
              {(showGlossary.client_name || showGlossary.case_study) && (
                <div className="mb-6">
                  <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Real-World Case Study</h4>
                  <div className="bg-gray-50 rounded-lg p-4">
                    {showGlossary.client_name && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Client Profile:</span>
                        <span className="text-gray-700 ml-2">{showGlossary.client_name}</span>
                      </div>
                    )}
                    
                    {showGlossary.structure && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Structure:</span>
                        <p className="text-gray-700 mt-1">{showGlossary.structure}</p>
                      </div>
                    )}
                    
                    {showGlossary.implementation && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Implementation:</span>
                        <p className="text-gray-700 mt-1">{showGlossary.implementation}</p>
                      </div>
                    )}
                    
                    {showGlossary.results && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Results:</span>
                        <p className="text-gray-700 mt-1 font-medium">{showGlossary.results}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Key Benefit Section */}
              {showGlossary.key_benefit && (
                <div className="mb-6">
                  <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Key Benefit</h4>
                  <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-4">
                    <p className="text-navy-900 font-medium">{showGlossary.key_benefit}</p>
                  </div>
                </div>
              )}

              {/* Related Terms */}
              {showGlossary.related_terms && showGlossary.related_terms.length > 0 && (
                <div className="border-t border-gray-200 pt-4">
                  <h4 className="text-sm font-semibold text-gray-500 mb-3">RELATED TERMS</h4>
                  <div className="flex flex-wrap gap-2">
                    {showGlossary.related_terms.map((relatedTerm, index) => (
                      <button
                        key={index}
                        onClick={() => openGlossary(relatedTerm)}
                        className="text-xs bg-navy-100 text-navy-700 px-3 py-1 rounded-full hover:bg-navy-200 transition-colors duration-200"
                      >
                        {relatedTerm}
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Premium Tools Overview Component
const PremiumToolsSection = () => {
  const tools = [
    {
      name: "AI Strategy Assistant",
      subtitle: "TaxBot",
      icon: "🤖",
      description: "GPT-powered assistant trained on IRS Escape Plan modules, glossary, and client case studies. Ask personalized questions and get strategy breakdowns with citations.",
      features: ["Personalized tax guidance", "Module citations & links", "Strategy breakdowns", "24/7 availability"],
      gradient: "from-blue-500 to-blue-600"
    },
    {
      name: "Strategy Simulators", 
      subtitle: "Interactive Calculators",
      icon: "📊",
      description: "Five powerful calculators including Roth Conversion impact, REPS Hour Tracker, Cost Segregation ROI, W-2 Offset Planner, and Bonus Depreciation Forecast.",
      features: ["Downloadable summaries", "Tax impact estimates", "Real-time calculations", "Multiple scenarios"],
      gradient: "from-emerald-500 to-emerald-600"
    },
    {
      name: "Advisor Chat + Office Hours",
      subtitle: "Live Expert Support", 
      icon: "🧑‍💼",
      description: "Live Zoom Q&A sessions twice per week plus private in-app advisor messaging with 1 question per day limit for implementation support.",
      features: ["Live Zoom sessions 2x/week", "Private advisor messaging", "Implementation guidance", "Complex tax question support"],
      gradient: "from-purple-500 to-purple-600"
    },
    {
      name: "Playbook Generator",
      subtitle: "Custom Tax Blueprint",
      icon: "🛠️", 
      description: "Customized tax blueprint based on your income, real estate, investments, and goals. Links to relevant modules and adapts as laws change.",
      features: ["Custom tax blueprints", "Module integration", "Dynamic updates", "Goal-based planning"],
      gradient: "from-orange-500 to-orange-600"
    },
    {
      name: "Document Analyzer",
      subtitle: "AI Tax Form Analysis",
      icon: "📄",
      description: "Upload W-2, 1040, K-1, or entity returns for AI analysis. Detects missed deductions, audit risks, and eligible strategies with clear action plans.",
      features: ["Multi-format support", "Missed deduction detection", "Audit risk analysis", "Actionable recommendations"],
      gradient: "from-red-500 to-red-600"
    },
    {
      name: "Gamification + XP System",
      subtitle: "Progress Tracking",
      icon: "🎮",
      description: "Earn XP and badges by completing content, using tools, uploading documents, and community engagement. Includes leaderboard and milestone rewards.",
      features: ["XP & badge system", "Community leaderboard", "Milestone rewards", "1-on-1 strategy calls"],
      gradient: "from-pink-500 to-pink-600"
    },
    {
      name: "Mobile Dashboard",
      subtitle: "iOS & Android App",
      icon: "📱",
      description: "Mobile-first access to all tools, REPS logging on the go, push alerts for law changes, and personalized strategy reminders.",
      features: ["iOS & Android apps", "REPS activity logging", "Push notifications", "Strategy reminders"],
      gradient: "from-indigo-500 to-indigo-600"
    }
  ];

  return (
    <section className="py-16 bg-gray-50">
      <div className="container mx-auto px-6">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-navy-900 mb-4">
            Premium <span className="text-emerald-500">Tools Bundle</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-6">
            Advanced AI-powered tools and personalized features that unlock with your monthly subscription
          </p>
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 max-w-2xl mx-auto">
            <div className="flex items-center justify-center mb-2">
              <svg className="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
              <span className="text-red-700 font-bold text-sm">Subscription Required</span>
            </div>
            <p className="text-red-600 text-sm">
              These tools require an active monthly subscription to access. Course content remains available forever.
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
          {tools.map((tool, index) => (
            <div key={index} className="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden">
              <div className={`bg-gradient-to-r ${tool.gradient} p-6 text-white`}>
                <div className="flex items-center mb-3">
                  <span className="text-3xl mr-3">{tool.icon}</span>
                  <div>
                    <h3 className="text-xl font-bold">{tool.name}</h3>
                    <p className="text-sm opacity-90">{tool.subtitle}</p>
                  </div>
                </div>
              </div>
              
              <div className="p-6">
                <p className="text-gray-600 text-sm mb-4 leading-relaxed">
                  {tool.description}
                </p>
                
                <div className="space-y-2">
                  <h4 className="font-semibold text-navy-900 text-sm">Key Features:</h4>
                  <ul className="space-y-1">
                    {tool.features.map((feature, featureIndex) => (
                      <li key={featureIndex} className="flex items-start text-sm text-gray-600">
                        <svg className="w-4 h-4 text-emerald-500 mt-0.5 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div className="mt-6 pt-4 border-t border-gray-100">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-500">Requires subscription</span>
                    <div className="flex items-center">
                      <svg className="w-4 h-4 text-red-400 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                      </svg>
                      <span className="text-xs text-red-500 font-medium">Premium</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="text-center mt-12">
          <div className="bg-navy-900 rounded-2xl p-8 max-w-4xl mx-auto">
            <h3 className="text-2xl font-bold text-white mb-4">Ready to Unlock Premium Tools?</h3>
            <p className="text-gray-300 mb-6">
              Get instant access to all premium tools with any active subscription plan
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button className="bg-gradient-to-r from-teal-500 to-teal-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all duration-200">
                Start W-2 Plan ($49/mo)
              </button>
              <button className="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all duration-200">
                Start Business Plan ($49/mo)
              </button>
              <button className="bg-gradient-to-r from-pink-500 to-pink-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all duration-200">
                Get All Access ($69/mo)
              </button>
            </div>
            <p className="text-gray-400 text-sm mt-4">
              All plans require one-time course fee + monthly subscription • Cancel anytime
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

// Premium Tools Overview Component
const PremiumToolsOverview = () => {
  const tools = [
    {
      name: "AI Strategy Assistant",
      subtitle: "TaxBot",
      icon: "🤖",
      description: "GPT-powered assistant trained on IRS Escape Plan modules, glossary, and client case studies. Ask personalized questions and get strategy breakdowns with citations.",
      features: ["Personalized tax guidance", "Module citations & links", "Strategy breakdowns", "24/7 availability"],
      gradient: "from-blue-500 to-blue-600"
    },
    {
      name: "Strategy Simulators", 
      subtitle: "Interactive Calculators",
      icon: "📊",
      description: "Five powerful calculators including Roth Conversion impact, REPS Hour Tracker, Cost Segregation ROI, W-2 Offset Planner, and Bonus Depreciation Forecast.",
      features: ["Downloadable summaries", "Tax impact estimates", "Real-time calculations", "Multiple scenarios"],
      gradient: "from-emerald-500 to-emerald-600"
    },
    {
      name: "Advisor Chat + Office Hours",
      subtitle: "Live Expert Support", 
      icon: "🧑‍💼",
      description: "Live Zoom Q&A sessions twice per week plus private in-app advisor messaging with 1 question per day limit for implementation support.",
      features: ["Live Zoom sessions 2x/week", "Private advisor messaging", "Implementation guidance", "Complex tax question support"],
      gradient: "from-purple-500 to-purple-600"
    },
    {
      name: "Playbook Generator",
      subtitle: "Custom Tax Blueprint",
      icon: "🛠️", 
      description: "Customized tax blueprint based on your income, real estate, investments, and goals. Links to relevant modules and adapts as laws change.",
      features: ["Custom tax blueprints", "Module integration", "Dynamic updates", "Goal-based planning"],
      gradient: "from-orange-500 to-orange-600"
    },
    {
      name: "Document Analyzer",
      subtitle: "AI Tax Form Analysis",
      icon: "📄",
      description: "Upload W-2, 1040, K-1, or entity returns for AI analysis. Detects missed deductions, audit risks, and eligible strategies with clear action plans.",
      features: ["Multi-format support", "Missed deduction detection", "Audit risk analysis", "Actionable recommendations"],
      gradient: "from-red-500 to-red-600"
    },
    {
      name: "Gamification + XP System",
      subtitle: "Progress Tracking",
      icon: "🎮",
      description: "Earn XP and badges by completing content, using tools, uploading documents, and community engagement. Includes leaderboard and milestone rewards.",
      features: ["XP & badge system", "Community leaderboard", "Milestone rewards", "1-on-1 strategy calls"],
      gradient: "from-pink-500 to-pink-600"
    },
    {
      name: "Mobile Dashboard",
      subtitle: "iOS & Android App",
      icon: "📱",
      description: "Mobile-first access to all tools, REPS logging on the go, push alerts for law changes, and personalized strategy reminders.",
      features: ["iOS & Android apps", "REPS activity logging", "Push notifications", "Strategy reminders"],
      gradient: "from-indigo-500 to-indigo-600"
    }
  ];

  return (
    <section className="py-16 bg-gray-50">
      <div className="container mx-auto px-6">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-navy-900 mb-4">
            Premium <span className="text-emerald-500">Tools Bundle</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-6">
            Advanced AI-powered tools and personalized features that unlock with your monthly subscription
          </p>
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 max-w-2xl mx-auto">
            <div className="flex items-center justify-center mb-2">
              <svg className="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
              <span className="text-red-700 font-bold text-sm">Subscription Required</span>
            </div>
            <p className="text-red-600 text-sm">
              These tools require an active monthly subscription to access. Course content remains available forever.
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
          {tools.map((tool, index) => (
            <div key={index} className="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden">
              <div className={`bg-gradient-to-r ${tool.gradient} p-6 text-white`}>
                <div className="flex items-center mb-3">
                  <span className="text-3xl mr-3">{tool.icon}</span>
                  <div>
                    <h3 className="text-xl font-bold">{tool.name}</h3>
                    <p className="text-sm opacity-90">{tool.subtitle}</p>
                  </div>
                </div>
              </div>
              
              <div className="p-6">
                <p className="text-gray-600 text-sm mb-4 leading-relaxed">
                  {tool.description}
                </p>
                
                <div className="space-y-2">
                  <h4 className="font-semibold text-navy-900 text-sm">Key Features:</h4>
                  <ul className="space-y-1">
                    {tool.features.map((feature, featureIndex) => (
                      <li key={featureIndex} className="flex items-start text-sm text-gray-600">
                        <svg className="w-4 h-4 text-emerald-500 mt-0.5 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div className="mt-6 pt-4 border-t border-gray-100">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-500">Requires subscription</span>
                    <div className="flex items-center">
                      <svg className="w-4 h-4 text-red-400 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                      </svg>
                      <span className="text-xs text-red-500 font-medium">Premium</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="text-center mt-12">
          <div className="bg-navy-900 rounded-2xl p-8 max-w-4xl mx-auto">
            <h3 className="text-2xl font-bold text-white mb-4">Ready to Unlock Premium Tools?</h3>
            <p className="text-gray-300 mb-6">
              Get instant access to all premium tools with any active subscription plan
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button className="bg-gradient-to-r from-teal-500 to-teal-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all duration-200">
                Start W-2 Plan ($49/mo)
              </button>
              <button className="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all duration-200">
                Start Business Plan ($49/mo)
              </button>
              <button className="bg-gradient-to-r from-pink-500 to-pink-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all duration-200">
                Get All Access ($69/mo)
              </button>
            </div>
            <p className="text-gray-400 text-sm mt-4">
              All plans require one-time course fee + monthly subscription • Cancel anytime
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

// Tools Section Component
const ToolsSection = ({ tools }) => {
  return (
    <div className="py-12">
      <div className="container mx-auto px-6">
        <h2 className="text-3xl font-bold text-navy-900 mb-8 text-center">Tax Tools & Calculators</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {tools.map((tool) => (
            <div key={tool.id} className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
              <div className="flex items-center mb-4">
                <div className="bg-emerald-100 p-3 rounded-lg mr-4">
                  <svg className="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-lg font-bold text-navy-900">{tool.name}</h3>
                  {tool.is_free ? (
                    <span className="text-emerald-600 text-sm font-semibold">FREE</span>
                  ) : (
                    <span className="text-amber-600 text-sm font-semibold">PREMIUM</span>
                  )}
                </div>
              </div>
              <p className="text-gray-600 mb-4">{tool.description}</p>
              <button className="w-full bg-emerald-500 hover:bg-emerald-600 text-white py-2 rounded-lg transition-colors duration-200">
                {tool.is_free ? 'Use Tool' : 'Upgrade to Access'}
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Glossary Section Component
const GlossarySection = ({ glossaryTerms }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredTerms, setFilteredTerms] = useState(glossaryTerms);
  const [selectedTerm, setSelectedTerm] = useState(null);
  const [expandedCards, setExpandedCards] = useState(new Set());
  const [courseFilter, setCourseFilter] = useState('all');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [startHereFilter, setStartHereFilter] = useState(false);
  const [searchSuggestions, setSearchSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);

  // Define beginner-friendly terms
  const beginnerTerms = [
    'W-2 Income', 'Effective Tax Rate', 'STR', 'Short-Term Rental (STR)', 
    'Bonus Depreciation', 'MSO (Management Services Organization)', 'REPS (Real Estate Professional Status)',
    'Tax Planning', 'CPA vs Strategist', 'AGI', 'Tax Efficiency', 'REPS',
    'Cost Segregation (Cost Seg)', 'Passive Loss Limitation', '750-Hour Test',
    'Income Repositioning', 'High-Income Threshold'
  ];

  // Categorize terms by course using simplified category structure
  const categorizeTermsByCourse = (terms) => {
    const businessOwnerCategories = [
      'Entity & Business Structuring', 'Investment Tax Strategies', 'Wealth Transfer & Protection'
    ];
    
    const w2Categories = [
      'Equity & Compensation'
    ];

    const sharedCategories = [
      'Tax Planning Strategies', 'Real Estate Tax Tools', 'Audit Defense & Compliance', 'Beginner Concepts'
    ];

    return terms.map(term => {
      if (businessOwnerCategories.includes(term.category)) {
        return { ...term, course: 'business' };
      } else if (w2Categories.includes(term.category)) {
        return { ...term, course: 'w2' };
      } else if (sharedCategories.includes(term.category)) {
        return { ...term, course: 'shared' };
      } else {
        // Default to shared for any uncategorized terms
        return { ...term, course: 'shared' };
      }
    });
  };

  // Get unique categories for filter dropdown
  const getUniqueCategories = (terms) => {
    const categories = [...new Set(terms.map(term => term.category))].sort();
    return categories;
  };

  // Predictive search function
  const handleSearchChange = (value) => {
    setSearchTerm(value);
    
    if (value.length > 1) {
      const suggestions = glossaryTerms
        .filter(term => 
          term.term.toLowerCase().includes(value.toLowerCase()) ||
          term.definition.toLowerCase().includes(value.toLowerCase()) ||
          term.plain_english?.toLowerCase().includes(value.toLowerCase())
        )
        .slice(0, 5)
        .map(term => term.term);
      
      setSearchSuggestions(suggestions);
      setShowSuggestions(true);
    } else {
      setShowSuggestions(false);
    }
  };

  // Filter terms based on all active filters
  useEffect(() => {
    let filtered = categorizeTermsByCourse(glossaryTerms);

    // Apply course filter
    if (courseFilter !== 'all') {
      filtered = filtered.filter(term => term.course === courseFilter);
    }

    // Apply category filter
    if (categoryFilter !== 'all') {
      filtered = filtered.filter(term => term.category === categoryFilter);
    }

    // Apply start here filter
    if (startHereFilter) {
      filtered = filtered.filter(term => beginnerTerms.includes(term.term));
    }

    // Apply search filter
    if (searchTerm) {
      filtered = filtered.filter(term =>
        term.term.toLowerCase().includes(searchTerm.toLowerCase()) ||
        term.definition.toLowerCase().includes(searchTerm.toLowerCase()) ||
        term.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
        term.plain_english?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredTerms(filtered);
  }, [searchTerm, glossaryTerms, courseFilter, categoryFilter, startHereFilter]);

  const openTermDetails = (term) => {
    setSelectedTerm(term);
  };

  const closeTermDetails = () => {
    setSelectedTerm(null);
  };

  const toggleCardExpansion = (termId) => {
    const newExpanded = new Set(expandedCards);
    if (newExpanded.has(termId)) {
      newExpanded.delete(termId);
    } else {
      newExpanded.add(termId);
    }
    setExpandedCards(newExpanded);
  };

  const selectSuggestion = (suggestion) => {
    setSearchTerm(suggestion);
    setShowSuggestions(false);
  };

  const uniqueCategories = getUniqueCategories(glossaryTerms);
  
  return (
    <div className="py-12">
      <div className="container mx-auto px-6">
        <h2 className="text-3xl font-bold text-navy-900 mb-8 text-center">Tax Strategy Glossary</h2>
        
        {/* Filter Controls */}
        <div className="max-w-6xl mx-auto mb-8">
          {/* Course Filter Tabs */}
          <div className="flex flex-wrap justify-center gap-2 mb-6">
            <button
              onClick={() => setCourseFilter('all')}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
                courseFilter === 'all' 
                  ? 'bg-emerald-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              All Strategies ({glossaryTerms.length})
            </button>
            <button
              onClick={() => setCourseFilter('w2')}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
                courseFilter === 'w2' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              W-2 Escape Plan
            </button>
            <button
              onClick={() => setCourseFilter('business')}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
                courseFilter === 'business' 
                  ? 'bg-purple-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Business Owner Escape Plan
            </button>
            <button
              onClick={() => setCourseFilter('shared')}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
                courseFilter === 'shared' 
                  ? 'bg-teal-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Shared Terms / Advanced
            </button>
          </div>

          {/* Search and Filters Row */}
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            {/* Predictive Search */}
            <div className="relative flex-1 max-w-md">
              <input
                type="text"
                placeholder="Search strategies and terms..."
                value={searchTerm}
                onChange={(e) => handleSearchChange(e.target.value)}
                onFocus={() => searchTerm.length > 1 && setShowSuggestions(true)}
                onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
                className="w-full px-4 py-3 pl-12 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              />
              <svg className="absolute left-4 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              
              {/* Search Suggestions */}
              {showSuggestions && searchSuggestions.length > 0 && (
                <div className="absolute top-full left-0 right-0 bg-white border border-gray-300 rounded-lg shadow-lg z-10 mt-1">
                  {searchSuggestions.map((suggestion, index) => (
                    <button
                      key={index}
                      onClick={() => selectSuggestion(suggestion)}
                      className="w-full text-left px-4 py-2 hover:bg-gray-100 first:rounded-t-lg last:rounded-b-lg"
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
              )}
            </div>

            {/* Category Filter */}
            <select
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
              className="px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 bg-white"
            >
              <option value="all">All Categories</option>
              {uniqueCategories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>

            {/* Start Here Toggle */}
            <label className="flex items-center space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={startHereFilter}
                onChange={(e) => setStartHereFilter(e.target.checked)}
                className="form-checkbox h-5 w-5 text-emerald-500 rounded focus:ring-emerald-500"
              />
              <span className="text-sm font-medium text-gray-700 whitespace-nowrap">
                🎯 Start Here (Beginner-Friendly)
              </span>
            </label>
          </div>
        </div>

        {/* Results Summary */}
        <div className="text-center mb-6">
          <p className="text-gray-600">
            Showing {filteredTerms.length} of {glossaryTerms.length} strategies
            {courseFilter !== 'all' && (
              <span className="ml-2 text-emerald-600 font-medium">
                • {courseFilter === 'w2' ? 'W-2 Escape Plan' : courseFilter === 'business' ? 'Business Owner' : 'Shared Terms'}
              </span>
            )}
            {categoryFilter !== 'all' && (
              <span className="ml-2 text-purple-600 font-medium">• {categoryFilter}</span>
            )}
            {startHereFilter && (
              <span className="ml-2 text-orange-600 font-medium">• Beginner-Friendly</span>
            )}
          </p>
        </div>
        
        {/* Glossary Cards Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto">
          {filteredTerms.map((term) => {
            const isExpanded = expandedCards.has(term.id);
            const courseBadgeColor = term.course === 'w2' ? 'bg-blue-100 text-blue-700' : 
                                   term.course === 'business' ? 'bg-purple-100 text-purple-700' : 
                                   'bg-teal-100 text-teal-700';
            const courseBadgeText = term.course === 'w2' ? 'W-2' : 
                                  term.course === 'business' ? 'Business' : 
                                  'Shared';

            return (
              <div key={term.id} className="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-200">
                {/* Collapsed Card Header - Always Visible */}
                <div 
                  className="p-6 cursor-pointer border-b border-gray-100"
                  onClick={() => toggleCardExpansion(term.id)}
                >
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="text-lg font-bold text-navy-900 flex-1 pr-2">{term.term}</h3>
                    <div className="flex items-center space-x-2">
                      <span className={`text-xs px-2 py-1 rounded-full font-medium ${courseBadgeColor}`}>
                        {courseBadgeText}
                      </span>
                      <svg 
                        className={`w-5 h-5 text-gray-400 transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`} 
                        fill="none" 
                        stroke="currentColor" 
                        viewBox="0 0 24 24"
                      >
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                  
                  {/* Category Tag */}
                  <div className="flex flex-wrap gap-2 mb-3">
                    <span className="text-xs bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full font-medium">
                      {term.category}
                    </span>
                    {beginnerTerms.includes(term.term) && (
                      <span className="text-xs bg-orange-100 text-orange-700 px-2 py-1 rounded-full font-medium">
                        🎯 Start Here
                      </span>
                    )}
                  </div>
                  
                  {/* Client Preview - Always Visible */}
                  {term.client_name && (
                    <div className="text-xs text-gray-500 mb-2">
                      📊 Case Study: {term.client_name}
                    </div>
                  )}
                  
                  <p className="text-gray-500 text-sm">
                    {isExpanded ? 'Click to collapse' : 'Click to expand and view details'}
                  </p>
                </div>

                {/* Expanded Content */}
                {isExpanded && (
                  <div className="p-6 pt-0 space-y-4">
                    {/* Definition */}
                    <div>
                      <h4 className="text-sm font-semibold text-navy-900 mb-2">Definition</h4>
                      <p className="text-gray-700 text-sm leading-relaxed">{term.definition}</p>
                    </div>

                    {/* Plain English */}
                    {term.plain_english && (
                      <div>
                        <h4 className="text-sm font-semibold text-navy-900 mb-2">Plain English</h4>
                        <p className="text-gray-700 text-sm leading-relaxed">{term.plain_english}</p>
                      </div>
                    )}

                    {/* Case Study */}
                    {(term.client_name || term.structure || term.implementation || term.results) && (
                      <div>
                        <h4 className="text-sm font-semibold text-navy-900 mb-2">Case Study</h4>
                        <div className="bg-gray-50 rounded-lg p-3 text-sm space-y-2">
                          {term.client_name && (
                            <div><span className="font-medium text-navy-700">Client:</span> {term.client_name}</div>
                          )}
                          {term.structure && (
                            <div><span className="font-medium text-navy-700">Structure:</span> {term.structure}</div>
                          )}
                          {term.implementation && (
                            <div><span className="font-medium text-navy-700">Implementation:</span> {term.implementation}</div>
                          )}
                          {term.results && (
                            <div><span className="font-medium text-navy-700">Results:</span> {term.results}</div>
                          )}
                        </div>
                      </div>
                    )}

                    {/* Key Benefit */}
                    {term.key_benefit && (
                      <div>
                        <h4 className="text-sm font-semibold text-navy-900 mb-2">Key Benefit</h4>
                        <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-3">
                          <p className="text-navy-900 font-medium text-sm">{term.key_benefit}</p>
                        </div>
                      </div>
                    )}

                    {/* Action Buttons */}
                    <div className="flex space-x-2 pt-2">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          openTermDetails(term);
                        }}
                        className="flex-1 bg-emerald-500 hover:bg-emerald-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200"
                      >
                        View Full Details
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleCardExpansion(term.id);
                        }}
                        className="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg text-sm transition-colors duration-200"
                      >
                        Collapse
                      </button>
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>

        {/* No Results Message */}
        {filteredTerms.length === 0 && (
          <div className="text-center py-12">
            <div className="text-gray-400 text-6xl mb-4">🔍</div>
            <h3 className="text-xl font-semibold text-gray-600 mb-2">No strategies found</h3>
            <p className="text-gray-500 mb-4">Try adjusting your filters or search terms</p>
            <button
              onClick={() => {
                setSearchTerm('');
                setCourseFilter('all');
                setCategoryFilter('all');
                setStartHereFilter(false);
              }}
              className="bg-emerald-500 hover:bg-emerald-600 text-white px-6 py-2 rounded-lg transition-colors duration-200"
            >
              Clear All Filters
            </button>
          </div>
        )}
      </div>

      {/* Detailed Term Modal - Enhanced */}
      {selectedTerm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-8">
              <div className="flex items-start justify-between mb-6">
                <div className="flex-1">
                  <h3 className="text-2xl font-bold text-navy-900 mb-2">{selectedTerm.term}</h3>
                  
                  {/* Tags */}
                  <div className="flex flex-wrap gap-2 mb-4">
                    <span className="text-sm bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full font-medium">
                      {selectedTerm.category}
                    </span>
                    {selectedTerm.course === 'w2' && (
                      <span className="text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded-full font-medium">
                        W-2 Escape Plan
                      </span>
                    )}
                    {selectedTerm.course === 'business' && (
                      <span className="text-sm bg-purple-100 text-purple-700 px-3 py-1 rounded-full font-medium">
                        Business Owner
                      </span>
                    )}
                    {beginnerTerms.includes(selectedTerm.term) && (
                      <span className="text-sm bg-orange-100 text-orange-700 px-3 py-1 rounded-full font-medium">
                        🎯 Start Here
                      </span>
                    )}
                    {selectedTerm.tags && selectedTerm.tags.map((tag, index) => (
                      <span key={index} className="text-xs bg-navy-100 text-navy-700 px-2 py-1 rounded-full">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
                
                <button
                  onClick={closeTermDetails}
                  className="text-gray-500 hover:text-gray-700 ml-4"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              {/* Definition Section */}
              <div className="mb-6">
                <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Definition</h4>
                <p className="text-gray-700 leading-relaxed">{selectedTerm.definition}</p>
              </div>

              {/* Plain English Section */}
              {selectedTerm.plain_english && (
                <div className="mb-6">
                  <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Plain English</h4>
                  <p className="text-gray-700 leading-relaxed">{selectedTerm.plain_english}</p>
                </div>
              )}

              {/* Real-World Case Study Section */}
              {(selectedTerm.client_name || selectedTerm.case_study) && (
                <div className="mb-6">
                  <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Real-World Case Study</h4>
                  <div className="bg-gray-50 rounded-lg p-4">
                    {selectedTerm.client_name && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Client Profile:</span>
                        <span className="text-gray-700 ml-2">{selectedTerm.client_name}</span>
                      </div>
                    )}
                    
                    {selectedTerm.structure && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Structure:</span>
                        <p className="text-gray-700 mt-1">{selectedTerm.structure}</p>
                      </div>
                    )}
                    
                    {selectedTerm.implementation && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Implementation:</span>
                        <p className="text-gray-700 mt-1">{selectedTerm.implementation}</p>
                      </div>
                    )}
                    
                    {selectedTerm.results && (
                      <div className="mb-3">
                        <span className="font-semibold text-navy-700">Results:</span>
                        <p className="text-gray-700 mt-1 font-medium">{selectedTerm.results}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Key Benefit Section */}
              {selectedTerm.key_benefit && (
                <div className="mb-6">
                  <h4 className="text-lg font-semibold text-navy-900 mb-3 border-b border-gray-200 pb-2">Key Benefit</h4>
                  <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-4">
                    <p className="text-navy-900 font-medium">{selectedTerm.key_benefit}</p>
                  </div>
                </div>
              )}

              {/* Related Terms */}
              {selectedTerm.related_terms && selectedTerm.related_terms.length > 0 && (
                <div className="border-t border-gray-200 pt-4">
                  <h4 className="text-sm font-semibold text-gray-500 mb-3">RELATED TERMS</h4>
                  <div className="flex flex-wrap gap-2">
                    {selectedTerm.related_terms.map((relatedTerm, index) => (
                      <button
                        key={index}
                        onClick={() => {
                          const relatedTermData = glossaryTerms.find(t => t.term === relatedTerm);
                          if (relatedTermData) {
                            setSelectedTerm(relatedTermData);
                          }
                        }}
                        className="text-xs bg-navy-100 text-navy-700 px-3 py-1 rounded-full hover:bg-navy-200 transition-colors duration-200"
                      >
                        {relatedTerm}
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Marketplace Section Component
const MarketplaceSection = () => {
  return (
    <div className="py-12">
      <div className="container mx-auto px-6 text-center">
        <h2 className="text-3xl font-bold text-navy-900 mb-8">Marketplace</h2>
        <div className="bg-white rounded-lg shadow-lg p-12 max-w-2xl mx-auto">
          <div className="mb-6">
            <svg className="w-16 h-16 mx-auto text-emerald-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H9m0 0H5m4 0V9a2 2 0 012-2h2a2 2 0 012 2v12M13 7h.01M9 7h.01" />
            </svg>
          </div>
          <h3 className="text-2xl font-bold text-navy-900 mb-4">Coming Soon</h3>
          <p className="text-gray-600 mb-6">
            The marketplace will feature additional premium courses, one-on-one consultations, 
            and specialized tax tools from certified professionals.
          </p>
          <button className="bg-emerald-500 hover:bg-emerald-600 text-white px-6 py-3 rounded-lg transition-colors duration-200">
            Notify Me When Available
          </button>
        </div>
      </div>
    </div>
  );
};

// Main App Component
const App = () => {
  const [activeSection, setActiveSection] = useState('courses');
  const [courses, setCourses] = useState([]);
  const [tools, setTools] = useState([]);
  const [glossaryTerms, setGlossaryTerms] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    fetchData();
  }, []);
  
  const fetchData = async () => {
    try {
      setLoading(true);
      
      // Fetch courses
      const coursesResponse = await fetch(`${API_BASE_URL}/api/courses`);
      const coursesData = await coursesResponse.json();
      setCourses(coursesData);
      
      // Fetch tools  
      const toolsResponse = await fetch(`${API_BASE_URL}/api/tools`);
      const toolsData = await toolsResponse.json();
      setTools(toolsData);
      
      // Fetch glossary
      const glossaryResponse = await fetch(`${API_BASE_URL}/api/glossary`);
      const glossaryData = await glossaryResponse.json();
      setGlossaryTerms(glossaryData);
      
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };
  
  const handleCourseClick = (course) => {
    setSelectedCourse(course);
  };
  
  const handleBackToCourses = () => {
    setSelectedCourse(null);
  };
  
  if (loading) {
    return (
      <div className="min-h-screen bg-navy-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-emerald-400 mx-auto mb-4"></div>
          <p className="text-white text-xl">Loading IRS Escape Plan...</p>
        </div>
      </div>
    );
  }
  
  if (selectedCourse) {
    return <CourseViewer course={selectedCourse} onBack={handleBackToCourses} />;
  }
  
  return (
    <div className="min-h-screen bg-gray-50">
      <Header activeSection={activeSection} setActiveSection={setActiveSection} />
      
      {activeSection === 'courses' && (
        <>
          <HeroSection />
          <PricingSection />
          <section className="py-12">
            <div className="container mx-auto px-6">
              <h2 className="text-3xl font-bold text-navy-900 mb-8 text-center">Choose Your Path</h2>
              {loading ? (
                <div className="flex items-center justify-center py-12">
                  <div className="text-lg text-gray-600">Loading courses...</div>
                </div>
              ) : courses.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                  {courses.map((course) => (
                    <CourseCard 
                      key={course.id} 
                      course={course} 
                      onCourseClick={handleCourseClick}
                    />
                  ))}
                </div>
              ) : (
                <div className="flex items-center justify-center py-12">
                  <div className="text-lg text-gray-600">No courses available.</div>
                </div>
              )}
            </div>
          </section>
        </>
      )}
      {activeSection === 'taxbot' && <TaxBotSection />}
      {activeSection === 'premium-tools' && <PremiumToolsOverview />}
      
      {activeSection === 'tools' && <ToolsSection tools={tools} />}
      {activeSection === 'glossary' && <GlossarySection glossaryTerms={glossaryTerms} />}
      {activeSection === 'marketplace' && <MarketplaceSection />}
    </div>
  );
};

// Premium Pricing Section Component
const PricingSection = () => {
  const plans = [
    {
      name: "W-2 Escape Plan",
      accent: "teal",
      oneTimePrice: "$997",
      oneTimeDescription: "one-time course fee",
      monthlyPrice: "$49/mo",
      monthlyDescription: "platform subscription",
      description: "High-income W-2 earners unlock deduction stacking, REPS access, and repositioning strategies.",
      features: [
        "Lifetime access to W-2 course modules",
        "AI Strategy Assistant (TaxBot) for W-2 questions", 
        "W-2 Offset Planner & REPS Hour Tracker",
        "Document Analyzer for W-2 & 1040 optimization",
        "Gamification + XP tracking system",
        "Mobile dashboard with strategy reminders"
      ],
      ctaText: "Start W-2 Plan",
      gradient: "from-teal-500 to-teal-600",
      border: "border-teal-200",
      bg: "bg-teal-50"
    },
    {
      name: "Business Owner Plan", 
      accent: "yellow",
      oneTimePrice: "$1,497",
      oneTimeDescription: "one-time course fee",
      monthlyPrice: "$49/mo",
      monthlyDescription: "platform subscription",
      description: "Entity optimization, MSO design, QBI qualification, and asset-backed exit strategies.",
      features: [
        "Lifetime access to Business Owner course",
        "AI Strategy Assistant (TaxBot) for entity questions",
        "Cost Segregation ROI & Bonus Depreciation tools",
        "Playbook Generator for business structures",
        "Document Analyzer for K-1 & entity returns",
        "Weekly office hours + advisor chat support"
      ],
      ctaText: "Start Business Plan",
      gradient: "from-yellow-500 to-yellow-600", 
      border: "border-yellow-200",
      bg: "bg-yellow-50"
    },
    {
      name: "All Access + AI",
      accent: "pink", 
      oneTimePrice: "$1,994",
      oneTimeDescription: "one-time course bundle",
      monthlyPrice: "$69/mo",
      monthlyDescription: "premium subscription",
      description: "Complete access to both courses, all tools, XP tracking, and your personal AI tax strategist.",
      features: [
        "Lifetime access to ALL courses & content",
        "Full AI Strategy Assistant (TaxBot) - unlimited access", 
        "Complete strategy simulator suite (Roth, REPS, W-2)",
        "Advanced Playbook Generator with custom blueprints",
        "Premium Document Analyzer for all tax forms",
        "Mobile app + priority advisor chat + office hours"
      ],
      ctaText: "Get All Access",
      gradient: "from-pink-500 to-pink-600",
      border: "border-pink-200", 
      bg: "bg-pink-50",
      popular: true,
      savings: "Save $500"
    }
  ];

  return (
    <section className="py-16 bg-navy-900">
      <div className="container mx-auto px-6">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-white mb-4">
            Choose Your <span className="text-emerald-400">Tax Freedom</span> Plan
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto mb-6">
            Professional tax strategies used by high-income earners to minimize tax burden and build wealth
          </p>
          <div className="bg-emerald-900/50 border border-emerald-400/30 rounded-lg p-4 max-w-2xl mx-auto">
            <p className="text-emerald-300 text-sm">
              <strong>Full Platform Access Requires:</strong> One-time course fee + Active monthly subscription
            </p>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
          {plans.map((plan, index) => (
            <div key={index} className={`relative bg-white rounded-2xl shadow-xl overflow-hidden transform hover:scale-105 transition-all duration-300 ${plan.popular ? 'ring-4 ring-emerald-400' : ''}`}>
              {plan.popular && (
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                  <span className="bg-emerald-400 text-navy-900 px-4 py-1 rounded-full text-sm font-bold">
                    MOST POPULAR
                  </span>
                </div>
              )}
              
              {plan.savings && (
                <div className="absolute top-4 right-4">
                  <span className="bg-red-500 text-white px-3 py-1 rounded-full text-xs font-bold">
                    {plan.savings}
                  </span>
                </div>
              )}
              
              <div className={`${plan.bg} px-6 py-8 border-b ${plan.border}`}>
                <h3 className="text-2xl font-bold text-navy-900 mb-2">{plan.name}</h3>
                <p className="text-gray-600 text-sm mb-6">{plan.description}</p>
                
                <div className="space-y-3">
                  <div className="bg-white rounded-lg p-3 border-2 border-gray-200">
                    <div className="flex items-baseline justify-between">
                      <span className="text-2xl font-bold text-navy-900">{plan.oneTimePrice}</span>
                      <span className="text-gray-500 text-sm">{plan.oneTimeDescription}</span>
                    </div>
                    <p className="text-xs text-gray-600 mt-1">Lifetime course access</p>
                  </div>
                  
                  <div className="text-center text-gray-500 font-bold">+</div>
                  
                  <div className={`bg-white rounded-lg p-3 border-2 ${plan.accent === 'pink' ? 'border-pink-200' : 'border-navy-200'}`}>
                    <div className="flex items-baseline justify-between">
                      <span className="text-2xl font-bold text-navy-900">{plan.monthlyPrice}</span>
                      <span className="text-gray-500 text-sm">{plan.monthlyDescription}</span>
                    </div>
                    <p className="text-xs text-gray-600 mt-1">
                      {plan.accent === 'pink' ? 'Premium AI tools & features' : 'AI tools & platform features'}
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="px-6 py-6">
                <ul className="space-y-3 mb-8">
                  {plan.features.map((feature, featureIndex) => (
                    <li key={featureIndex} className="flex items-start">
                      <svg className="w-5 h-5 text-emerald-500 mt-0.5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                      </svg>
                      <span className="text-gray-700 text-sm">{feature}</span>
                    </li>
                  ))}
                </ul>
                
                <button className={`w-full bg-gradient-to-r ${plan.gradient} text-white py-4 px-6 rounded-xl font-bold text-lg hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200`}>
                  {plan.ctaText}
                </button>
                
                <p className="text-xs text-gray-500 text-center mt-3">
                  Cancel anytime • Keep course access forever
                </p>
              </div>
            </div>
          ))}
        </div>
        
        <div className="max-w-4xl mx-auto mt-12">
          <div className="bg-navy-800 border border-navy-600 rounded-xl p-6">
            <h3 className="text-white text-lg font-bold mb-4 text-center">What You Get With Your Investment</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-navy-700 rounded-lg p-4">
                <h4 className="text-emerald-400 font-bold mb-2">One-Time Course Fee Includes:</h4>
                <ul className="text-gray-300 text-sm space-y-1">
                  <li>• Lifetime access to course modules</li>
                  <li>• Downloadable resources & worksheets</li>
                  <li>• Case studies & implementation guides</li>
                  <li>• Static course content forever</li>
                </ul>
              </div>
              <div className="bg-navy-700 rounded-lg p-4">
                <h4 className="text-emerald-400 font-bold mb-2">Monthly Subscription Unlocks:</h4>
                <ul className="text-gray-300 text-sm space-y-1">
                  <li>• AI Strategy Assistant (TaxBot) - personalized guidance</li>
                  <li>• Strategy simulators (Roth, REPS, W-2 offset, etc.)</li>
                  <li>• Playbook Generator with custom tax blueprints</li>
                  <li>• Document Analyzer for tax form optimization</li>
                  <li>• Weekly office hours + in-app advisor chat</li>
                  <li>• Mobile app with push alerts & progress tracking</li>
                </ul>
              </div>
            </div>
            
            <div className="mt-6 bg-navy-600 rounded-lg p-4">
              <div className="flex items-center justify-center mb-2">
                <svg className="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                <span className="text-red-400 font-bold text-sm">Important:</span>
              </div>
              <p className="text-gray-300 text-sm text-center">
                <strong>Full platform functionality requires both payments.</strong> Canceling your subscription means you keep lifetime course access but lose AI features, tools, and premium support.
              </p>
            </div>
          </div>
        </div>
        
        <div className="text-center mt-8">
          <p className="text-gray-400 text-sm mb-4">
            30-day money-back guarantee on course fee • Cancel subscription anytime • Secure payment
          </p>
          <div className="flex items-center justify-center space-x-6 text-gray-500">
            <div className="flex items-center">
              <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
              </svg>
              Secure SSL
            </div>
            <div className="flex items-center">
              <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              Course Access Forever
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default App;
